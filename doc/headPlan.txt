File -> head.js

Commands Available:
  1 node head.js filename [going to implement]
  2 node head.js -n 5 filename [going to implement]
  3 node head.js
  4 node head.js -n 4
  5 node head.js hello bye hi
  6 node head.js -n 6 hello bye hi

Cases Covered: 
  1 Program will give first n lines of the content.
  2 Program will give all that lines if content have less than n lines.
  3 Program will give error message if file doesn't exists.
  4 Program will give error message if line count is illegal.
  5 Program will give error message if option is illegal.

Functions: 
  1 filterLines
  2 loadContent
  3 filterFilenames
  4 getLineCount

------------------------------

[1.1] (Step to filter out first n lines based on lineCount)
	
  Output => string: lines (first n lines)
		"1\n2\n3\n4\n5\n6\n7\n8\n9\n10"
	
  Input => string: content, number: lineCount
		"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11", 10
	
  Name => filterLines

------------------------------


[1.2a] (Step which will give error if file doesn't exits)
	
  Output => string: errorMessage (errorMessage, that the file doesn't exists)
		head: ./hello: No such file or directory (after that program will exit)
	
  Input => string: filenames	 
		"hello"
	
  Name => loadContent
	
  NOTE: we will use fs.exists to catch the error and redirect it to error stream


[1.2b] (Step to read contents from a file)
  
  Output => string: content
    "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11"
  
  Input => array of strings: filenames
    ["hello"]
  
  Name: loadContent

------------------------------

[1.3] (Step to filter filenames)
  
  Output => array of string: filenames
		["hello"]
	
  Input => array of string : args
		["node", "head,js", "hello"] OR ["node", "head.js", "-n", "4", "hello"]
	
  Name => filterFilenames

------------------------------

[1.4a] (Step which will give error if illegal line count is given)
  
  Output => string: errorMessage (This will go to err stream) (after that program will exit)
    head: illegal line count -- -2
  
  Input => array of strings: args
    ["node", "head.js", "-n", "-2", "hello"]
  
  Name => getLineCount


[1.4b] (Step which will give error if option is invalid)
	
  Output => string: errorMessage (This will go to err stream) (after that program will exit)
		head: illegal option -- d
	
  Input => array of strings: args
    ["node", "head.js", "-d", "5", "hello"]
  
  Name => getLineCount
  

[1.4c] (Step to extract line count)
  
  Output => number: lineCount
    4
  
  Input => array of string: args
    ["node", "head.js", "-n", "4", "hello"]
  
  Name => getLineCount

  NOTE: if no option found it will directly go to 1.3 and lineCount will set to 10;
        if option specified and is valid, lineCount will set to the given value

------------------------------