File -> head.js

Commands Available:
  1 node head.js file1 [implemented]
  2 node head.js [implementing]
  3 node head.js -n 5 file1
  4 node head.js -n 4
  5 node head.js file1 file2 file3
  6 node head.js -n 6 file1 file2 file3

Cases Covered: 
  1 Program will give first n lines of the content.
  2 Program will give all that lines if content have less than n lines.
  3 Program will give error message if file doesn't exists.
  4 Program will give error message if line count is illegal.
  5 Program will give error message if option is illegal.

Functions: 
  1 filterHeadLines
  2 getHeadLines
  3 loadContent
  4 getInputStream

------------------------------

[1.1a] (Step to filter out first 10 lines based of given file when give file is valid)
	
  NOTE: in this case the head lines will be printed on stdout.

  Output => object: headOutcome
		{
      errMsg: '',
      headLines: '1\n2\n3\n4\n5\n6\n7\n8\n9\n1'
    }
	
  Input => stream: inputStream, callback: writer
		fileReader('only_10_lines.txt'),
	
  Name => filterHeadLines

[1.1b] (Step to give error when give file is invalid)
	
  NOTE: in this case the error will be printed on stderr.

  Output => object: headOutcome
		{
      errMsg: 'head: invalid_file.txt: No such file or directory',
      headLines: ''
    }
	
  Input => stream: inputStream, callback: writer
		fileReader('only_10_lines.txt'),
	
  Name => filterHeadLines

[1.1c] (Step to read content from stdin when no file is given)
	
  NOTE: in this case the error will be printed on stderr.

  Output => object: headOutcome
		{
      errMsg: '',
      headLines: 'content'
    }
	
  Input => stream: inputStream, callback: writer
		fileReader('only_10_lines.txt'),
	
  Name => filterHeadLines

------------------------------

[1.2] (Step to get head lines of the given content)

  Output => object: headOutcome
  {
    errMsg: '',
    headLines: '1\n2\n3\n4\n5\n6\n7\n8\n9\n1'
  }

  Input => object: content
  {
    errMsg: '',
    headLines: '1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n0\n1\n1'
  }
	
  Name => getHeadLines

------------------------------

[1.3a] (Step to get file content when file exists)

  Output => object: content
  {
    errMsg: '',
    headLines: 'content'
  }
	
  Input => stream: inputStream, callback: returnContent
    fs.createReadableStream('only_10_lines.txt')

  NOTE: when the file present read its data and send it to callback

  Name => loadContent


[1.3b] (Step to get error when file doesn't exists)

  Output => object: content
  {
    errMsg: 'head: invalid_file.txt: No such file or directory',
    headLines: ''
  }
	
  Input => stream: inputStream, callback: returnContent
    fs.createReadableStream('invalid_file.txt')

  NOTE: when the file doesn't present format error and send it to callback

  Name => loadContent


[1.3c] (Step to get content from stdin)

  Output => object: content
  {
    errMsg: '',
    headLines: 'content'
  }
	
  Input => stream: inputStream, callback: returnContent
    process.stdin

  NOTE: It will read from stdin when input stream is stdin. 

  Name => loadContent

  ------------------------------

[1.4a] (Step to get file stream)
  
  Output => stream: fileReader
    fs.createReadableStream(filename)

  Input => array of strings: filenames, object: streams
    ['only_10_lines.txt'],
    {
      fileReader: fs.createReadableStream,
      inputReader: process.stdin
    }

  Name => getInputStream


[1.4b] (Step to get input stream)

  Output => stream: inputReader
    process.stdin
  
  Input => array of strings: filenames, object: streams
    [],
    {
      fileReader: fs.createReadableStream,
      inputReader: process.stdin
    }
  
  Name => getInputStream
