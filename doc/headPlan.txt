File -> head.js

Commands Available:
  1 node head.js file1 [implemented]
  2 node head.js [implementing]
  3 node head.js -n 5 file1
  4 node head.js -n 4
  5 node head.js file1 file2 file3
  6 node head.js -n 6 file1 file2 file3

Cases Covered: 
  1 Program will give first n lines of the content.
  2 Program will give all that lines if content have less than n lines.
  3 Program will give error message if file doesn't exists.
  4 Program will give error message if line count is illegal.
  5 Program will give error message if option is illegal.

Functions: 
  1 filterHeadLines
  2 getHeadLines
  3 loadContent

------------------------------

[1.1a] (Step to filter out first 10 lines based of given file when give file is valid)
	
  NOTE: in this case the head lines will be printed on stdout.

  Output => object: headOutcome
		{
      errMsg: "",
      headLines: "1\n2\n3\n4\n5\n6\n7\n8\n9\n1"
    }
	
  Input => array of strings: process.argv
		["node", "head.js", "only_10_lines.txt"]
	
  Name => filterHeadLines

[1.1b] (Step to give error when give file is invalid)
	
  NOTE: in this case the error will be printed on stderr.

  Output => object: headOutcome
		{
      errMsg: "head: invalid_file.txt: No such file or directory",
      headLines: ""
    }
	
  Input => array of strings: process.argv
		["node", "head.js", "invalid_file.txt"]
	
  Name => filterHeadLines

------------------------------

[1.2] (Step to get head lines of the given content)

  Output => object: headOutcome
  {
    errMsg: "",
    headLines: "1\n2\n3\n4\n5\n6\n7\n8\n9\n1"
  }

  Input => string: content, number: lineCount
    content: "1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n0\n1\n1"
		lineCount: 10
	
  Name => getHeadLines

------------------------------

NOTE: We will use fs.existsSync to check whether given file exists or not

[1.3a] (Step to get err when file doesn't exists)

  Output => object: content
  {
    errMsg: "head: invalid_file.txt: No such file or directory",
    headLines: ""
  }
	
  Input => function: read, function: exists, array of strings: filenames
    read: fs.readFileSync
    exists: fs.existsSync
    filenames: ["invalid_file.txt"]

  Name => loadContent


  [1.3b] (Step to get content when file exists)
	
  Output => string: content
    "1\n2\n3\4\n5\n6\n7\n8\n9\n1\n0\n1\n1"

  Input => function: read, function: exists, array of strings: filenames
    read: fs.readFileSync
    exists: fs.existsSync
    filenames: ["more_than_10_lines.txt"]

  Name => loadContent


  [1.3c] (Step to get content from standard input)
	
  NOTE: the following output will come from stdin

  Output => string: content
    "1\n2\n3\4\n5\n6\n7\n8\n9\n1"

  Input => function: read, function: exists, array of strings: filenames
    read: fs.readFileSync
    exists: fs.existsSync
    filenames: []

  Name => loadContent

  ------------------------------