File -> head.js

Commands Available:
  1 node head.js filename
  2 node head.js -n 5 filename
  3 node head.js
  4 node head.js -n 4

Cases Covered: 
  1 Program will give first n lines of the content.
  2 Program will give all that lines if content have less than n lines.
  3 Program will give error message if file doesn't exists.
  4 Program will give error message if line count is illegal.
  5 Program will give error message if option is illegal.

Functions: 
  1 filterLines
  2 loadContent
  3 filterFilenames
  4 getLineCount

------------------------------

[1.1] (Step to filter out first n lines based on lineCount)
	
  Output => string: lines (first n lines)
		"1\n2\n3\n4\n5\n6\n7\n8\n9\n10"
	
  Input => string: content, number: lineCount
		"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11", 10
	
  Name => filterLines

------------------------------

[1.2.2] (Step to read n lines from stdin based on lineCount)
  
  Output => string: content
    "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"
  
  Input => number: lineCount
    10
  
  Name: loadContent

==========

[1.2.1a] (Step which will give error if file doesn't exits)
	
  Output => string: errorMessage (errorMessage, that the file doesn't exists)
		head: ./hello: No such file or directory (after that program will exit)
	
  Input => string: filenames	 
		"hello"
	
  Name => loadContent
	
  NOTE: we will use fis.exists to catch the error and redirect it to error stream


[1.2.1b] (Step to read contents from a file)
  
  Output => string: content
    "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11"
  
  Input => array of strings: filenames
    ["hello"]
  
  Name: loadContent

==========

[1.2] (Step to decide how to get content)
  
  Output => string: content or errorMessage
    "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11"
  
  Input => array of strings: filenames
    [] OR ["hello]
  
  Name: loadContent
  
  NOTE: when the array of filenames is empty we will use stdin to take input, else we will be reading from the file given (1.2.1, read content from file) (1.2.2, read from stdin) 

------------------------------

[1.3] (Step to filter filenames)
  
  Output => array of string: filenames
		["hello"] OR []
	
  Input => array of string : args
		["node", "head,js", "hello"] OR ["node", "head.js", "-n", "4", "hello"]
    OR
    ["node", "head,js"] OR ["node", "head.js", "-n", "4"]
	
  Name => filterFilenames

------------------------------

[1.4a] (Step which will give error if illegal line count is given)
  
  Output => string: errorMessage (This will go to err stream) (after that program will exit)
    head: illegal line count -- -2
  
  Input => array of strings: args
    ["node", "head.js", "-n", "-2", "hello"]
  
  Name => getLineCount


[1.4b] (Step which will give error if option is invalid)
	
  Output => string: errorMessage (This will go to err stream) (after that program will exit)
		head: illegal option -- d
	
  Input => array of strings: args
    ["node", "head.js", "-d", "5", "hello"]
  
  Name => getLineCount
  

[1.4c] (Step to extract line count)
  
  Output => number: lineCount
    4
  
  Input => array of string: args
    ["node", "head.js", "-n", "4", "hello"]
  
  Name => getLineCount

  NOTE: if no option found it will directly go to 1.3 and lineCount will set to 10;
        if option specified and is valid, lineCount will set to the given value

------------------------------